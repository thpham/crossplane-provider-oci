/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContainerRepositoryObservation struct {

	// Total storage size in GBs that will be charged.
	BillableSizeInGbs *string `json:"billableSizeInGbs,omitempty" tf:"billable_size_in_gbs,omitempty"`

	// The id of the user or principal that created the resource.
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// The OCID of the container repository.  Example: ocid1.containerrepo.oc1..exampleuniqueID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Total number of images.
	ImageCount *float64 `json:"imageCount,omitempty" tf:"image_count,omitempty"`

	// Total number of layers.
	LayerCount *float64 `json:"layerCount,omitempty" tf:"layer_count,omitempty"`

	// Total storage in bytes consumed by layers.
	LayersSizeInBytes *string `json:"layersSizeInBytes,omitempty" tf:"layers_size_in_bytes,omitempty"`

	// The tenancy namespace used in the container repository path.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The current state of the container repository.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The system tags for this resource. Each key is predefined and scoped to a namespace. Example: {"orcl-cloud.free-tier-retained": "true"}
	SystemTags map[string]*string `json:"systemTags,omitempty" tf:"system_tags,omitempty"`

	// An RFC 3339 timestamp indicating when the repository was created.
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	// An RFC 3339 timestamp indicating when an image was last pushed to the repository.
	TimeLastPushed *string `json:"timeLastPushed,omitempty" tf:"time_last_pushed,omitempty"`
}

type ContainerRepositoryParameters struct {

	// (Updatable) The OCID of the compartment in which to create the resource.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// Reference to a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// Selector for a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.  Example: {"Operations.CostCenter": "42"}
	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// The container repository name.
	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"Department": "Finance"}
	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// (Updatable) Whether the repository is immutable. Images cannot be overwritten in an immutable repository.
	// +kubebuilder:validation:Optional
	IsImmutable *bool `json:"isImmutable,omitempty" tf:"is_immutable,omitempty"`

	// (Updatable) Whether the repository is public. A public repository allows unauthenticated access.
	// +kubebuilder:validation:Optional
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// (Updatable) Container repository readme.
	// +kubebuilder:validation:Optional
	Readme []ReadmeParameters `json:"readme,omitempty" tf:"readme,omitempty"`
}

type ReadmeObservation struct {
}

type ReadmeParameters struct {

	// (Updatable) Readme content. Avoid entering confidential information.
	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// (Updatable) Readme format. Supported formats are text/plain and text/markdown.
	// +kubebuilder:validation:Required
	Format *string `json:"format" tf:"format,omitempty"`
}

// ContainerRepositorySpec defines the desired state of ContainerRepository
type ContainerRepositorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ContainerRepositoryParameters `json:"forProvider"`
}

// ContainerRepositoryStatus defines the observed state of ContainerRepository.
type ContainerRepositoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContainerRepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerRepository is the Schema for the ContainerRepositorys API. Provides the Container Repository resource in Oracle Cloud Infrastructure Artifacts service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type ContainerRepository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ContainerRepositorySpec   `json:"spec"`
	Status            ContainerRepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerRepositoryList contains a list of ContainerRepositorys
type ContainerRepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContainerRepository `json:"items"`
}

// Repository type metadata.
var (
	ContainerRepository_Kind             = "ContainerRepository"
	ContainerRepository_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ContainerRepository_Kind}.String()
	ContainerRepository_KindAPIVersion   = ContainerRepository_Kind + "." + CRDGroupVersion.String()
	ContainerRepository_GroupVersionKind = CRDGroupVersion.WithKind(ContainerRepository_Kind)
)

func init() {
	SchemeBuilder.Register(&ContainerRepository{}, &ContainerRepositoryList{})
}
