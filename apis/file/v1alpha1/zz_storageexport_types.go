/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExportOptionsObservation struct {
}

type ExportOptionsParameters struct {

	// (Updatable) Type of access to grant clients using the file system through this export. If unspecified defaults to READ_WRITE.
	// +kubebuilder:validation:Optional
	Access *string `json:"access,omitempty" tf:"access,omitempty"`

	// (Updatable) Array of allowed NFS authentication types.
	// +kubebuilder:validation:Optional
	AllowedAuth []*string `json:"allowedAuth,omitempty" tf:"allowed_auth,omitempty"`

	// (Updatable) GID value to remap to when squashing a client GID (see identitySquash for more details.) If unspecified defaults to 65534.
	// +kubebuilder:validation:Optional
	AnonymousGID *string `json:"anonymousGid,omitempty" tf:"anonymous_gid,omitempty"`

	// (Updatable) UID value to remap to when squashing a client UID (see identitySquash for more details.) If unspecified, defaults to 65534.
	// +kubebuilder:validation:Optional
	AnonymousUID *string `json:"anonymousUid,omitempty" tf:"anonymous_uid,omitempty"`

	// (Updatable) Used when clients accessing the file system through this export have their UID and GID remapped to 'anonymousUid' and 'anonymousGid'. If ALL, all users and groups are remapped; if ROOT, only the root user and group (UID/GID 0) are remapped; if NONE, no remapping is done. If unspecified, defaults to ROOT.
	// +kubebuilder:validation:Optional
	IdentitySquash *string `json:"identitySquash,omitempty" tf:"identity_squash,omitempty"`

	// (Updatable) Whether or not to enable anonymous access to the file system through this export in cases where a user isn't found in the LDAP server used for ID mapping. If true, and the user is not found in the LDAP directory, the operation uses the Squash UID and Squash GID.
	// +kubebuilder:validation:Optional
	IsAnonymousAccessAllowed *bool `json:"isAnonymousAccessAllowed,omitempty" tf:"is_anonymous_access_allowed,omitempty"`

	// (Updatable) If true, clients accessing the file system through this export must connect from a privileged source port. If unspecified, defaults to true.
	// +kubebuilder:validation:Optional
	RequirePrivilegedSourcePort *bool `json:"requirePrivilegedSourcePort,omitempty" tf:"require_privileged_source_port,omitempty"`

	// (Updatable) Clients these options should apply to. Must be a either single IPv4 address or single IPv4 CIDR block.
	// +kubebuilder:validation:Required
	Source *string `json:"source" tf:"source,omitempty"`
}

type StorageExportObservation struct {

	// The OCID of this export.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The current state of this export.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The date and time the export was created, expressed in RFC 3339 timestamp format.  Example: 2016-08-25T21:10:29.600Z
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type StorageExportParameters struct {

	// (Updatable) Export options for the new export. If left unspecified, defaults to:
	// [ { "source" : "0.0.0.0/0", "requirePrivilegedSourcePort" : false, "access": "READ_WRITE", "identitySquash": "NONE", "anonymousUid": 65534, "anonymousGid": 65534, "isAnonymousAccessAllowed": false, "allowedAuth": ["SYS"] } ]
	// +kubebuilder:validation:Optional
	ExportOptions []ExportOptionsParameters `json:"exportOptions,omitempty" tf:"export_options,omitempty"`

	// The OCID of this export's export set.
	// +crossplane:generate:reference:type=StorageExportSet
	// +kubebuilder:validation:Optional
	ExportSetID *string `json:"exportSetId,omitempty" tf:"export_set_id,omitempty"`

	// Reference to a StorageExportSet to populate exportSetId.
	// +kubebuilder:validation:Optional
	ExportSetIDRef *v1.Reference `json:"exportSetIdRef,omitempty" tf:"-"`

	// Selector for a StorageExportSet to populate exportSetId.
	// +kubebuilder:validation:Optional
	ExportSetIDSelector *v1.Selector `json:"exportSetIdSelector,omitempty" tf:"-"`

	// The OCID of this export's file system.
	// +crossplane:generate:reference:type=StorageFileSystem
	// +kubebuilder:validation:Optional
	FileSystemID *string `json:"fileSystemId,omitempty" tf:"file_system_id,omitempty"`

	// Reference to a StorageFileSystem to populate fileSystemId.
	// +kubebuilder:validation:Optional
	FileSystemIDRef *v1.Reference `json:"fileSystemIdRef,omitempty" tf:"-"`

	// Selector for a StorageFileSystem to populate fileSystemId.
	// +kubebuilder:validation:Optional
	FileSystemIDSelector *v1.Selector `json:"fileSystemIdSelector,omitempty" tf:"-"`

	// (Updatable) Whether or not the export should use ID mapping for Unix groups rather than the group list provided within an NFS request's RPC header. When this flag is true the Unix UID from the RPC header is used to retrieve the list of secondary groups from a the ID mapping subsystem. The primary GID is always taken from the RPC header. If ID mapping is not configured, incorrectly configured, unavailable, or cannot be used to determine a list of secondary groups then an empty secondary group list is used for authorization. If the number of groups exceeds the limit of 256 groups, the list retrieved from LDAP is truncated to the first 256 groups read.
	// +kubebuilder:validation:Optional
	IsIdmapGroupsForSysAuth *bool `json:"isIdmapGroupsForSysAuth,omitempty" tf:"is_idmap_groups_for_sys_auth,omitempty"`

	// Path used to access the associated file system.
	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`
}

// StorageExportSpec defines the desired state of StorageExport
type StorageExportSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageExportParameters `json:"forProvider"`
}

// StorageExportStatus defines the observed state of StorageExport.
type StorageExportStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageExportObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageExport is the Schema for the StorageExports API. Provides the Export resource in Oracle Cloud Infrastructure File Storage service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type StorageExport struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageExportSpec   `json:"spec"`
	Status            StorageExportStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageExportList contains a list of StorageExports
type StorageExportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageExport `json:"items"`
}

// Repository type metadata.
var (
	StorageExport_Kind             = "StorageExport"
	StorageExport_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageExport_Kind}.String()
	StorageExport_KindAPIVersion   = StorageExport_Kind + "." + CRDGroupVersion.String()
	StorageExport_GroupVersionKind = CRDGroupVersion.WithKind(StorageExport_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageExport{}, &StorageExportList{})
}
