/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SourceDetailsObservation struct {

	// The OCID of the file system that contains the source snapshot of a cloned file system. See Cloning a File System.
	ParentFileSystemID *string `json:"parentFileSystemId,omitempty" tf:"parent_file_system_id,omitempty"`

	// The OCID of the snapshot used to create a cloned file system. See Cloning a File System.
	SourceSnapshotID *string `json:"sourceSnapshotId,omitempty" tf:"source_snapshot_id,omitempty"`
}

type SourceDetailsParameters struct {
}

type StorageFileSystemObservation struct {

	// The OCID of the file system.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies whether the file system has been cloned. See Cloning a File System.
	IsCloneParent *bool `json:"isCloneParent,omitempty" tf:"is_clone_parent,omitempty"`

	// Specifies whether the data has finished copying from the source to the clone. Hydration can take up to several hours to complete depending on the size of the source. The source and clone remain available during hydration, but there may be some performance impact. See Cloning a File System.
	IsHydrated *bool `json:"isHydrated,omitempty" tf:"is_hydrated,omitempty"`

	// Specifies whether the file system can be used as a target file system for replication. The system sets this value to true if the file system is unexported, hasn't yet been specified as a target file system in any replication resource, and has no user snapshots. After the file system has been specified as a target in a replication, or if the file system contains user snapshots, the system sets this value to false. For more information, see Using Replication.
	IsTargetable *bool `json:"isTargetable,omitempty" tf:"is_targetable,omitempty"`

	// Additional information about the current 'lifecycleState'.
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details,omitempty"`

	// The number of bytes consumed by the file system, including any snapshots. This number reflects the metered size of the file system and is updated asynchronously with respect to updates to the file system. For more information, see File System Usage and Metering.
	MeteredBytes *string `json:"meteredBytes,omitempty" tf:"metered_bytes,omitempty"`

	// The OCID of the replication target associated with the file system. Empty if the file system is not being used as target in a replication.
	ReplicationTargetID *string `json:"replicationTargetId,omitempty" tf:"replication_target_id,omitempty"`

	// Source information for the file system.
	SourceDetails []SourceDetailsObservation `json:"sourceDetails,omitempty" tf:"source_details,omitempty"`

	// The current state of the file system.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The date and time the file system was created, expressed in RFC 3339 timestamp format.  Example: 2016-08-25T21:10:29.600Z
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type StorageFileSystemParameters struct {

	// The availability domain to create the file system in.  Example: Uocm:PHX-AD-1
	// +kubebuilder:validation:Required
	AvailabilityDomain *string `json:"availabilityDomain" tf:"availability_domain,omitempty"`

	// (Updatable) The OCID of the compartment to create the file system in.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// Reference to a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// Selector for a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: {"Operations.CostCenter": "42"}
	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information.  Example: My file system
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Updatable) The OCID of the associated file system snapshot policy, which controls the frequency of snapshot creation and retention period of the taken snapshots.
	// +kubebuilder:validation:Optional
	FilesystemSnapshotPolicyID *string `json:"filesystemSnapshotPolicyId,omitempty" tf:"filesystem_snapshot_policy_id,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags. Example: {"Department": "Finance"}
	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// (Updatable) The OCID of KMS key used to encrypt the encryption keys associated with this file system. May be unset as a blank or deleted from the configuration to remove the KMS key.
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// The OCID of the snapshot used to create a cloned file system. See Cloning a File System.
	// +kubebuilder:validation:Optional
	SourceSnapshotID *string `json:"sourceSnapshotId,omitempty" tf:"source_snapshot_id,omitempty"`
}

// StorageFileSystemSpec defines the desired state of StorageFileSystem
type StorageFileSystemSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageFileSystemParameters `json:"forProvider"`
}

// StorageFileSystemStatus defines the observed state of StorageFileSystem.
type StorageFileSystemStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageFileSystemObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageFileSystem is the Schema for the StorageFileSystems API. Provides the File System resource in Oracle Cloud Infrastructure File Storage service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type StorageFileSystem struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageFileSystemSpec   `json:"spec"`
	Status            StorageFileSystemStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageFileSystemList contains a list of StorageFileSystems
type StorageFileSystemList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageFileSystem `json:"items"`
}

// Repository type metadata.
var (
	StorageFileSystem_Kind             = "StorageFileSystem"
	StorageFileSystem_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageFileSystem_Kind}.String()
	StorageFileSystem_KindAPIVersion   = StorageFileSystem_Kind + "." + CRDGroupVersion.String()
	StorageFileSystem_GroupVersionKind = CRDGroupVersion.WithKind(StorageFileSystem_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageFileSystem{}, &StorageFileSystemList{})
}
