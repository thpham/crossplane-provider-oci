/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeyVersionExternalKeyReferenceDetailsObservation struct {

	// ExternalKeyId refers to the globally unique key Id associated with the key created in external vault in CTM.
	ExternalKeyID *string `json:"externalKeyId,omitempty" tf:"external_key_id,omitempty"`

	// Key version ID associated with the external key.
	ExternalKeyVersionID *string `json:"externalKeyVersionId,omitempty" tf:"external_key_version_id,omitempty"`
}

type KeyVersionExternalKeyReferenceDetailsParameters struct {
}

type KeyVersionObservation struct {

	// The OCID of the compartment that contains this key version.
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// Key reference data to be returned to the customer as a response.
	ExternalKeyReferenceDetails []KeyVersionExternalKeyReferenceDetailsObservation `json:"externalKeyReferenceDetails,omitempty" tf:"external_key_reference_details,omitempty"`

	// The OCID of the key version.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A Boolean value that indicates whether the KeyVersion belongs to primary Vault or replica Vault.
	IsPrimary *bool `json:"isPrimary,omitempty" tf:"is_primary,omitempty"`

	// The OCID of the key version.
	KeyVersionID *string `json:"keyVersionId,omitempty" tf:"key_version_id,omitempty"`

	// The public key in PEM format. (This value pertains only to RSA and ECDSA keys.)
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// KeyVersion replica details
	ReplicaDetails []KeyVersionReplicaDetailsObservation `json:"replicaDetails,omitempty" tf:"replica_details,omitempty"`

	// The OCID of the key.
	RestoredFromKeyID *string `json:"restoredFromKeyId,omitempty" tf:"restored_from_key_id,omitempty"`

	// The OCID of the key version from which this key version was restored.
	RestoredFromKeyVersionID *string `json:"restoredFromKeyVersionId,omitempty" tf:"restored_from_key_version_id,omitempty"`

	// The key version's current lifecycle state.  Example: ENABLED
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The date and time this key version was created, expressed in RFC 3339 timestamp format.  Example: "2018-04-03T21:10:29.600Z"
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	// The OCID of the vault that contains this key version.
	VaultID *string `json:"vaultId,omitempty" tf:"vault_id,omitempty"`
}

type KeyVersionParameters struct {

	// Key version ID associated with the external key.
	// +kubebuilder:validation:Optional
	ExternalKeyVersionID *string `json:"externalKeyVersionId,omitempty" tf:"external_key_version_id,omitempty"`

	// The OCID of the key.
	// +crossplane:generate:reference:type=Key
	// +kubebuilder:validation:Optional
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// Reference to a Key to populate keyId.
	// +kubebuilder:validation:Optional
	KeyIDRef *v1.Reference `json:"keyIdRef,omitempty" tf:"-"`

	// Selector for a Key to populate keyId.
	// +kubebuilder:validation:Optional
	KeyIDSelector *v1.Selector `json:"keyIdSelector,omitempty" tf:"-"`

	// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
	// +kubebuilder:validation:Required
	ManagementEndpoint *string `json:"managementEndpoint" tf:"management_endpoint,omitempty"`

	// (Updatable) An optional property for the deletion time of the key version, expressed in RFC 3339 timestamp format. Example: 2019-04-03T21:10:29.600Z
	// +kubebuilder:validation:Optional
	TimeOfDeletion *string `json:"timeOfDeletion,omitempty" tf:"time_of_deletion,omitempty"`
}

type KeyVersionReplicaDetailsObservation struct {

	// ReplicationId associated with a key version operation
	ReplicationID *string `json:"replicationId,omitempty" tf:"replication_id,omitempty"`
}

type KeyVersionReplicaDetailsParameters struct {
}

// KeyVersionSpec defines the desired state of KeyVersion
type KeyVersionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyVersionParameters `json:"forProvider"`
}

// KeyVersionStatus defines the observed state of KeyVersion.
type KeyVersionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyVersionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeyVersion is the Schema for the KeyVersions API. Provides the Key Version resource in Oracle Cloud Infrastructure Kms service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type KeyVersion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyVersionSpec   `json:"spec"`
	Status            KeyVersionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyVersionList contains a list of KeyVersions
type KeyVersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyVersion `json:"items"`
}

// Repository type metadata.
var (
	KeyVersion_Kind             = "KeyVersion"
	KeyVersion_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeyVersion_Kind}.String()
	KeyVersion_KindAPIVersion   = KeyVersion_Kind + "." + CRDGroupVersion.String()
	KeyVersion_GroupVersionKind = CRDGroupVersion.WithKind(KeyVersion_Kind)
)

func init() {
	SchemeBuilder.Register(&KeyVersion{}, &KeyVersionList{})
}
