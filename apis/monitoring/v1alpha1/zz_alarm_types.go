/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlarmObservation struct {

	// The OCID of the alarm.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The current lifecycle state of the alarm.  Example: DELETED
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The date and time the alarm was created. Format defined by RFC3339.  Example: 2019-02-01T01:02:29.600Z
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	// The date and time the alarm was last updated. Format defined by RFC3339.  Example: 2019-02-03T01:02:29.600Z
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated,omitempty"`
}

type AlarmParameters struct {

	// (Updatable) The human-readable content of the delivered alarm notification. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.  Example: High CPU usage alert. Follow runbook instructions for resolution.
	// +kubebuilder:validation:Optional
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// (Updatable) The OCID of the compartment containing the alarm.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// Reference to a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// Selector for a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: {"Operations.CostCenter": "42"}
	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A list of destinations for alarm notifications. Each destination is represented by the OCID of a related resource, such as a topic. Supported destination services: Notifications , Streaming.           Limit: One destination per supported destination service.
	// +kubebuilder:validation:Required
	Destinations []*string `json:"destinations" tf:"destinations,omitempty"`

	// (Updatable) A user-friendly name for the alarm. It does not have to be unique, and it's changeable. Avoid entering confidential information.
	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: {"Department": "Finance"}
	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// (Updatable) Whether the alarm is enabled.  Example: true
	// +kubebuilder:validation:Required
	IsEnabled *bool `json:"isEnabled" tf:"is_enabled,omitempty"`

	// (Updatable) When set to true, splits alarm notifications per metric stream. When set to false, groups alarm notifications across metric streams. Example: true
	// +kubebuilder:validation:Optional
	IsNotificationsPerMetricDimensionEnabled *bool `json:"isNotificationsPerMetricDimensionEnabled,omitempty" tf:"is_notifications_per_metric_dimension_enabled,omitempty"`

	// (Updatable) The format to use for alarm notifications. The formats are:
	// +kubebuilder:validation:Optional
	MessageFormat *string `json:"messageFormat,omitempty" tf:"message_format,omitempty"`

	// (Updatable) The OCID of the compartment containing the metric being evaluated by the alarm.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	MetricCompartmentID *string `json:"metricCompartmentId,omitempty" tf:"metric_compartment_id,omitempty"`

	// (Updatable) When true, the alarm evaluates metrics from all compartments and subcompartments. The parameter can only be set to true when metricCompartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, the alarm evaluates metrics from only the compartment specified in metricCompartmentId. Default is false.  Example: true
	// +kubebuilder:validation:Optional
	MetricCompartmentIDInSubtree *bool `json:"metricCompartmentIdInSubtree,omitempty" tf:"metric_compartment_id_in_subtree,omitempty"`

	// Reference to a Compartment in identity to populate metricCompartmentId.
	// +kubebuilder:validation:Optional
	MetricCompartmentIDRef *v1.Reference `json:"metricCompartmentIdRef,omitempty" tf:"-"`

	// Selector for a Compartment in identity to populate metricCompartmentId.
	// +kubebuilder:validation:Optional
	MetricCompartmentIDSelector *v1.Selector `json:"metricCompartmentIdSelector,omitempty" tf:"-"`

	// (Updatable) The source service or application emitting the metric that is evaluated by the alarm.  Example: oci_computeagent
	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state changes from "OK" to "FIRING". For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to "FIRING".
	// +kubebuilder:validation:Optional
	PendingDuration *string `json:"pendingDuration,omitempty" tf:"pending_duration,omitempty"`

	// (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval depend on the specified time range. More interval values are supported for smaller time ranges. You can optionally specify dimensions and grouping functions. Supported grouping functions: grouping(), groupBy(). For information about writing MQL expressions, see Editing the MQL Expression for a Query. For details about MQL, see Monitoring Query Language (MQL) Reference. For available dimensions, review the metric definition for the supported service. See Supported Services.
	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`

	// (Updatable) The frequency for re-submitting alarm notifications, if the alarm keeps firing without interruption. Format defined by ISO 8601. For example, PT4H indicates four hours. Minimum: PT1M. Maximum: P30D.
	// +kubebuilder:validation:Optional
	RepeatNotificationDuration *string `json:"repeatNotificationDuration,omitempty" tf:"repeat_notification_duration,omitempty"`

	// (Updatable) The time between calculated aggregation windows for the alarm. Supported value: 1m
	// +kubebuilder:validation:Optional
	Resolution *string `json:"resolution,omitempty" tf:"resolution,omitempty"`

	// (Updatable) Resource group that you want to match. A null value returns only metric data that has no resource groups. The alarm retrieves metric data associated with the specified resource group only. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($). Avoid entering confidential information.  Example: frontend-fleet
	// +kubebuilder:validation:Optional
	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group,omitempty"`

	// (Updatable) The perceived type of response required when the alarm is in the "FIRING" state.  Example: CRITICAL
	// +kubebuilder:validation:Required
	Severity *string `json:"severity" tf:"severity,omitempty"`

	// (Updatable) The configuration details for suppressing an alarm.
	// +kubebuilder:validation:Optional
	Suppression []SuppressionParameters `json:"suppression,omitempty" tf:"suppression,omitempty"`
}

type SuppressionObservation struct {
}

type SuppressionParameters struct {

	// (Updatable) Human-readable reason for suppressing alarm notifications. It does not have to be unique, and it's changeable. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Updatable) The start date and time for the suppression to take place, inclusive. Format defined by RFC3339.  Example: 2019-02-01T01:02:29.600Z
	// +kubebuilder:validation:Required
	TimeSuppressFrom *string `json:"timeSuppressFrom" tf:"time_suppress_from,omitempty"`

	// (Updatable) The end date and time for the suppression to take place, inclusive. Format defined by RFC3339.  Example: 2019-02-01T02:02:29.600Z
	// +kubebuilder:validation:Required
	TimeSuppressUntil *string `json:"timeSuppressUntil" tf:"time_suppress_until,omitempty"`
}

// AlarmSpec defines the desired state of Alarm
type AlarmSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlarmParameters `json:"forProvider"`
}

// AlarmStatus defines the observed state of Alarm.
type AlarmStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlarmObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Alarm is the Schema for the Alarms API. Provides the Alarm resource in Oracle Cloud Infrastructure Monitoring service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type Alarm struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AlarmSpec   `json:"spec"`
	Status            AlarmStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlarmList contains a list of Alarms
type AlarmList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Alarm `json:"items"`
}

// Repository type metadata.
var (
	Alarm_Kind             = "Alarm"
	Alarm_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Alarm_Kind}.String()
	Alarm_KindAPIVersion   = Alarm_Kind + "." + CRDGroupVersion.String()
	Alarm_GroupVersionKind = CRDGroupVersion.WithKind(Alarm_Kind)
)

func init() {
	SchemeBuilder.Register(&Alarm{}, &AlarmList{})
}
